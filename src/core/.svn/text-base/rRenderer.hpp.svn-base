#ifndef R_RENDERER_HPP
#define R_RENDERER_HPP

#include "rTypes.hpp"
#include "rRenderCommand.hpp"
#include "rDrawable.hpp"
#include "rGraphicsDevice.hpp"

#include "math/rMath2.hpp"
#include "math/rMath3.hpp"

#include <vector>

typedef std::vector<rRenderCommand*> rRenderCommandArray;

class rRenderer : public rRendererI{
public:

	rRenderer(rGraphicsDevice* graphicsDevice);
	~rRenderer();

	inline void SetRenderMode(rRenderMode mode);
	void Render(rDrawable* drawable, rRenderMode mode);

	void ExecuteCommands();

	void Begin();
	void End();

	virtual void DrawRectangle(const rRectangle2& rectangle,const rColor& color, rRenderMode mode = rRENDER_DEFAULT);
	virtual void DrawCircle(const rCircle2& circle,const rColor& color, rRenderMode mode = rRENDER_DEFAULT);
	virtual void DrawPoint(const rVector2& point , const rColor& color, rRenderMode mode = rRENDER_DEFAULT);
	virtual void DrawPoint3(const rVector3& point , const rColor& color, rRenderMode mode = rRENDER_DEFAULT);
	virtual void DrawLines(rFloatArray& lines , const rColor& color, rRenderMode mode = rRENDER_DEFAULT);
	virtual void DrawLines3(rVector3Array& lines , const rColor& color);
	virtual void DrawTriangle(const rTriangle2& triangle , const rColor& color, rRenderMode mode = rRENDER_DEFAULT);
	virtual void DrawAlignedBox(const rAlignedBox3& box , const rColor& color , rRenderMode mode = rRENDER_DEFAULT);
	virtual void DrawSphere(const rSphere3& sphere , const rColor& color , rRenderMode mode = rRENDER_DEFAULT);
        virtual void DrawCone3(const rCone3& cone , const rColor& color, rRenderMode mode = rRENDER_DEFAULT);
        virtual void DrawLineSegment3(const rLineSegment3& segment , const rColor& color);
private:
	void ClearCommands();

private:
	rRenderCommandArray m_commands;

	rRenderMode m_currentMode;

	rGraphicsDevice* m_graphicsDevice;

	bool m_isRendering;
};

void rRenderer::SetRenderMode(rRenderMode mode){
	m_currentMode = mode;
}


#endif