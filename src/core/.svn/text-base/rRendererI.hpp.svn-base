#ifndef R_RENDERER_I_HPP
#define R_RENDERER_I_HPP

#include "rTypes.hpp"

#include "math/rMath2.hpp"
#include "math/rMath3.hpp"

enum rRenderMode{
	rRENDER_DEFAULT,
	rRENDER_WIRE,
	rRENDER_SHADED,
	rRENDER_TEXTURE
};

class rRendererI{
public:

	virtual void DrawRectangle(const rRectangle2& rectangle,const rColor& color, rRenderMode mode = rRENDER_DEFAULT) = 0;
	virtual void DrawCircle(const rCircle2& circle,const rColor& color, rRenderMode mode = rRENDER_DEFAULT) = 0;
	virtual void DrawPoint(const rVector2& point , const rColor& color, rRenderMode mode = rRENDER_DEFAULT) = 0;
	virtual void DrawPoint3(const rVector3& point , const rColor& color, rRenderMode mode = rRENDER_DEFAULT) = 0;
	virtual void DrawLines(rFloatArray& lines , const rColor& color, rRenderMode mode = rRENDER_DEFAULT) = 0;
	virtual void DrawLines3(rVector3Array& lines , const rColor& color) = 0;
	virtual void DrawTriangle(const rTriangle2& triangle , const rColor& color, rRenderMode mode = rRENDER_DEFAULT) = 0;
	virtual void DrawAlignedBox(const rAlignedBox3& box , const rColor& color , rRenderMode mode = rRENDER_DEFAULT) = 0;
	virtual void DrawSphere(const rSphere3& sphere , const rColor& color , rRenderMode mode = rRENDER_DEFAULT) = 0;
        virtual void DrawCone3(const rCone3& cone , const rColor& color, rRenderMode mode = rRENDER_DEFAULT) = 0;
        virtual void DrawLineSegment3(const rLineSegment3& segment , const rColor& color) = 0;
};

#endif
